/* libvecdisp.h
drawing on vector displays such as oscilloscopes in XY-Mode. Also includes a simulator. */
#ifndef VECDISP
#define VECDISP

#include <stdint.h>
#include <stdbool.h>


/* define output method. Choose at compile time with gcc -D<OUT_METHOD>
OUT_METHOD_SIM 			for simulating 10-bit Resoluation XY-Monitor with SDL
OUT_METHOD_SPIDAC		for the 12-bit SPI DAC */
#if !defined(OUT_METHOD_SIM) && !defined(OUT_METHOD_SPIDAC)
	#define OUT_METHOD_SIM
#endif

/* DAC output method. Choose at compile time with gcc -D<OUT_METHOD>
OUT_METHOD_DIGITAL 		every coordinate is represented in the buffer. Slow but pretty.
OUT_METHOD_ANALOG		only start and end coordinates are in buffer, voltage slope is generated by the slope limiter output circuit */ 
#if !defined(OUT_METHOD_DIGITAL) && !defined(OUT_METHOD_ANALOG)
	#define OUT_METHOD_DIGITAL
#endif

/* Settings the gain of the output voltages
1 for 2.048V, 0 for 4.096V */
#define OUT_GAIN 0		

/* drawing resolution. Choose at compile time with gcc -DDRAW_RES=<resolution>
Must not exceed 4096 */
#if !defined(DRAW_RES)
#define DRAW_RES 1024
#endif

/* DAC scale factor according to draw resolution. Using power of 2 for faster code.*/
#if (DRAW_RES <= 1024)
	#define DRAW_SCALE 4
#elif (DRAW_RES <= 2048)
	#define DRAW_SCALE 2
#else
	#define DRAW_SCALE 1
#endif

/* screen center */
#define DRAW_CENTER (DRAW_RES/2)

/* shape brightness. Adjust for sensitivity of Z Output / different Scopes or Displays */
#if defined (OUT_METHOD_SPIDAC)
	#define DRAW_BRTNS_BRIGHT 	0x0FFF
	#define DRAW_BRTNS_DARK 	0x0E99
	#define DRAW_BRTNS_NONE		0x0000
#elif defined (OUT_METHOD_SIM)
	#define DRAW_BRTNS_BRIGHT 	0x0FFF
	#define DRAW_BRTNS_DARK 	0x0333
	#define DRAW_BRTNS_NONE		0x0000
#else
	#define DRAW_BRTNS_BRIGHT 	0x0FFF
	#define DRAW_BRTNS_DARK 	0x0E99
	#define DRAW_BRTNS_NONE		0x0000
#endif

/* pre-generated LUTs */
extern const double lut_sin256[256];
extern const double lut_cos256[256];

/* generic return values used troughout the library */
typedef enum {
	VECDISP_SUCCESS = 0,
	VECDISP_FAILURE
} VECDISP_T;

/* types of shapes available in vecdisp_shape_t */
typedef enum {
	VECDISP_SHAPE_POINTS,
	VECDISP_SHAPE_LINES,
	VECDISP_SHAPE_TRIANGLES,
	VECDISP_SHAPE_CUBEBEZ
} VECDISP_SHAPE_TYPE_T;

/* shape structure with data.
data is interpreted depending on TYPE when calling vecdisp_draw_shape() */
typedef struct {
	VECDISP_SHAPE_TYPE_T TYPE;
	uint16_t ** data;
	uint32_t data_len;
} vecdisp_shape_t;

/* vecdisp_init(): initialising the system
parameter: none
return value: VECDISP_SUCCESS = successful, VECDISP_FAILURE = failure */
VECDISP_T vecdisp_init(void);

/* vecdisp_end(): deinitialising the system
parameter: none
return value: VECDISP_SUCCESS = successful, VECDISP_FAILURE = failure */
VECDISP_T vecdisp_end(void);

/* vecdisp_out_init(): initialising the output
parameter: none
return value: VECDISP_SUCCESS = successful, VECDISP_FAILURE = failure */
VECDISP_T vecdisp_out_init();

/* vecdisp_out_end(): deinitialising the output
parameter: none
return value: VECDISP_SUCCESS = successful, VECDISP_FAILURE = failure */
VECDISP_T vecdisp_out_end();

/* vecdisp_draw_update(): updating the output with values in out_buffer
parameter: none
return value: VECDISP_SUCCESS = successful, VECDISP_FAILURE = failure */
VECDISP_T vecdisp_draw_update(void);

/* vecdisp_draw_move(): Move beam to coordinate
parameter: x0 = x-coordinate, y0 = y-coordinate, z0 = brightness
return value: none */
void vecdisp_draw_move(uint16_t x0, uint16_t y0, uint16_t z0);

/* vecdisp_draw_point(): drawing a dot
parameter: x0 = x-coordinate, y0 = y-coordinate, z0 = brightness
return value: none */
void vecdisp_draw_point(uint16_t x0, uint16_t y0, uint16_t z0);

/* vecdisp_draw_line(): drawing a line
parameter: x0 = start x-coordinate, y0 = start y-coordinate, x1 = end x-coordinate, y1 = end y-coordinate, z0 = brightness
return value: none */
void vecdisp_draw_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t z0);

/* vecdisp_draw_path(): drawing a path with connected lines
parameter: path[][2] = array of lines with x- & y-coordinates, leng = length of array, z0 = brightness
return value: none */
void vecdisp_draw_path(uint16_t path[][2], uint32_t len, uint16_t z0 ) ;

/* vecdisp_draw_rect_aa(): drawing a axis aligned rectangle
parameter: x0 = start corner x-coordinate, y0 = start corner y-coordinate, x1 = end corner x-coordinate, y1 = end corner y-coordinate, z0 = brightness
return value: none */
void vecdisp_draw_rect_aa(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t z0);

/* vecdisp_draw_ellipse(): drawing a ellipse
parameter: x0 = center x-coordinate, y0 = center y-coordinate, radius_x = radius of x-axis, radius_y = radius of y-axis, z0 = brightness, roundness = step size of corner angle. lower is better
return value: none */
void vecdisp_draw_ellipse(uint16_t x0, uint16_t y0, uint16_t radius_x, uint16_t radius_y, uint16_t z0, uint8_t roundness);

/* vecdisp_draw_triangle(): drawing a triangle
parameter: a[2] = coordinates of first corner, b[2] = coordinates of second corner, c[2] = coordinates of third corner
return value: none */
void vecdisp_draw_triangle( uint16_t a[2], uint16_t b[2], uint16_t c[2], uint16_t z0 );

/* vecdisp_draw_char(): drawing a char
parameter: x0 = left x-coordinate, y0 = bottom y-coordinate, x1 = right x-coordinate, y1 = top y-coordinate, z0 = brightness, x = character (unsupported chars are blank)
return value: none */
void vecdisp_draw_char(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t z0, char x );

/* vecdisp_draw_char(): drawing a string
parameter: x0 = left x-coordinate, y0 = bottom y-coordinate, x1 = right x-coordinate, y1 = top y-coordinate, z0 = brightness, str = string (unsupported chars are blank), margin = space between chars
return value: none */
void vecdisp_draw_string(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t z0, char * str, uint16_t margin );

/* vecdisp_draw_cubebez(): drawing a cubic bezier-curve
parameter: a[2] = coordinates of first bezier point, b[2] = coordinates of second bezier point, c[2] = coordinates of third bezier point, d[2] = coordinates of fourth bezier point, z0 = brightness
return value: none */
void vecdisp_draw_cubebez( uint16_t a[2], uint16_t b[2], uint16_t c[2], uint16_t d[2], uint16_t z0 );

/* vecdisp_draw_shape(): draw data of shape structure.
parameter: * shape = pointer to shape structure, x0 = left x-coordinate, y0 = bottom y-coordinate, x1 = right x-coordinate, y1 = top y-coordinate, z0 = brightness
return value: none */
void vecdisp_draw_shape( vecdisp_shape_t * shape, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t z0 );

/* vecdisp_shape_create(): Create a shape of type TYPE with data buffer. 
parameter: TYPE = shape type, * data[2] = array of x- and y coordinates, data_len = length of data array
return value: pointer to vecdisp_shape_t structure. */
vecdisp_shape_t * vecdisp_shape_create(VECDISP_SHAPE_TYPE_T TYPE, uint16_t data[][2], uint32_t data_len);

/* vecdisp_shape_destroy(): destroy a shape.
parameter: shape = pointer to shape structure
return value: none */
void vecdisp_shape_destroy(vecdisp_shape_t * shape );

/* vecdisp_shape_adddata(): adds data to shape.
parameter: shape = pointer to shape structure, * data[2] = array of x- and y coordinates, data_len = length of data array
return value: VECDISP_SUCCESS = successful, VECDISP_FAILURE = failure */
VECDISP_T vecdisp_shape_data_add(vecdisp_shape_t * shape, uint16_t data[][2], uint32_t data_len);

/* vecdisp_shape_data_clear(): clearing the data in shape
parameter: shape = pointer to shape structure
return value: none */
void vecdisp_shape_data_clear( vecdisp_shape_t * shape );

/* vecdisp_shape_import_svg(): import svg image file as shape of type VECDISP_SHAPE_CUBEBEZ.
parameter: * filepath = string of path to svg file
return value: pointer to shape structure */
vecdisp_shape_t * vecdisp_shape_import_svg( const char * filepath );

/* vecdisp_dbg_showfps(): prints the current fps to stdout when called repeatedly
parameter: none
return value: none */
void vecdisp_dbg_showfps(void);

#endif